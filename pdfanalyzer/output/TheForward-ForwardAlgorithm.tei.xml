<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Forward-Forward Algorithm: Some Preliminary Investigations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2022-12-27">27 Dec 2022</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName coords="1,271.09,181.86,69.83,8.96"><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
							<email>geoffhinton@google.com</email>
						</author>
						<title level="a" type="main">The Forward-Forward Algorithm: Some Preliminary Investigations</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2022-12-27">27 Dec 2022</date>
						</imprint>
					</monogr>
					<idno type="MD5">C8ED2B4B94BA130A675367F5A8020315</idno>
					<idno type="arXiv">arXiv:2212.13345v1[cs.LG]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-03-08T10:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The aim of this paper is to introduce a new learning procedure for neural networks and to demonstrate that it works well enough on a few small problems to be worth further investigation. The Forward-Forward algorithm replaces the forward and backward passes of backpropagation by two forward passes, one with positive (i.e. real) data and the other with negative data which could be generated by the network itself. Each layer has its own objective function which is simply to have high goodness for positive data and low goodness for negative data. The sum of the squared activities in a layer can be used as the goodness but there are many other possibilities, including minus the sum of the squared activities. If the positive and negative passes could be separated in time, the negative passes could be done offline, which would make the learning much simpler in the positive pass and allow video to be pipelined through the network without ever storing activities or stopping to propagate derivatives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">What is wrong with backpropagation</head><p>The astonishing success of deep learning over the last decade has established the effectiveness of performing stochastic gradient descent with a large number of parameters and a lot of data. The gradients are usually computed using backpropagation <ref type="bibr" coords="1,325.99,507.82,92.95,8.64" target="#b37">(Rumelhart et al., 1986)</ref>, and this has led to a lot of interest in whether the brain implements backpropagation or whether it has some other way of getting the gradients needed to adjust the weights on connections.</p><p>As a model of how cortex learns, backpropagation remains implausible despite considerable effort to invent ways in which it could be implemented by real neurons (</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="7" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="8" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="9" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="10" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="11" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="12" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="13" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="14" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="15" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="16" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A further serious limitation of backpropagation is that it requires perfect knowledge of the computation performed in the forward pass 1 in order to compute the correct derivatives 2 . If we insert a black box into the forward pass, it is no longer possible to perform backpropagation unless we learn a differentiable model of the black box. As we shall see, the black box does not change the learning procedure at all for the Forward-Forward Algorithm because there is no need to backpropagate through it.</p><p>In the absence of a perfect model of the forward pass, it is always possible to resort to one of the many forms of reinforcement learning. The idea is to make random perturbations of the weights or the neural activities and to correlate these perturbations with the resulting changes in a payoff function. But reinforcement learning procedures suffer from high variance: it is hard to see the effect of perturbing one variable when many other variables are being perturbed at the same time. To average away the noise caused by all the other perturbations, the learning rate needs to be inversely proportional to the number of variables that are being perturbed and this means that reinforcement learning scales badly and cannot compete with backpropagation for large networks containing many millions or billions of parameters 3 .</p><p>The main point of this paper is to show that neural networks containing unknown non-linearities do not need to resort to reinforcement learning. The Forward-Forward algorithm (FF) is comparable in speed to backpropagation but has the advantage that it can be used when the precise details of the forward computation are unknown. It also has the advantage that it can learn while pipelining sequential data through a neural network without ever storing the neural activities or stopping to propagate error derivatives.</p><p>The forward-forward algorithm is somewhat slower than backpropagation and does not generalize quite as well on several of the toy problems investigated in this paper so it is unlikely to replace backpropagation for applications where power is not an issue. The exciting exploration of the abilities of very large models trained on very large datasets will continue to use backpropagation. The two areas in which the forward-forward algorithm may be superior to backpropagation are as a model of learning in cortex and as a way of making use of very low-power analog hardware without resorting to reinforcement learning <ref type="bibr" coords="2,208.23,386.46,97.48,8.64" target="#b21">(Jabri and Flower, 1992)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Forward-Forward Algorithm</head><p>The Forward-Forward algorithm is a greedy multi-layer learning procedure inspired by Boltzmann machines <ref type="bibr" coords="2,147.54,452.63,118.10,8.64" target="#b17">(Hinton and Sejnowski, 1986)</ref> and Noise Contrastive Estimation <ref type="bibr" coords="2,402.49,452.63,102.76,8.64;2,108.00,463.54,21.70,8.64" target="#b13">(Gutmann and Hyv√§rinen, 2010)</ref>. The idea is to replace the forward and backward passes of backpropagation by two forward passes that operate in exactly the same way as each other, but on different data and with opposite objectives. The positive pass operates on real data and adjusts the weights to increase the goodness in every hidden layer. The negative pass operates on "negative data" and adjusts the weights to decrease the goodness in every hidden layer. This paper explores two different measures of goodness -the sum of the squared neural activities and the negative sum of the squared activities, but many other measures are possible.</p><p>Let us suppose that the goodness function for a layer is simply the sum of the squares of the activities of the rectified linear neurons in that layer 4 The aim of the learning is to make the goodness be well above some threshold value for real data and well below that value for negative data. More specifically, the aim is to correctly classify input vectors as positive data or negative data when the 1 I use "forward pass" to refer to either a forward pass through a multi-layer network or a forward pass in time in a recurrent network.</p><p>2 It is possible to use random weights in the backward pass instead of the transpose of the forward weights, and this yields fake derivatives that work surprisingly well on small-scale tasks like MNIST <ref type="bibr" coords="2,447.91,632.69,57.22,7.77;2,108.00,642.65,19.67,7.77" target="#b26">(Lillicrap et al., 2016)</ref>, but it does not scale well to large networks and it is particularly bad at squeezing information through narrow bottlenecks.</p><p>3 One possible way to make reinforcement learning scale better is to have many different objective functions and to train subsets of the neurons or weights using their own local objective function <ref type="bibr" coords="2,412.51,673.42,92.23,7.77" target="#b8">(Dayan and Hinton, 1992;</ref><ref type="bibr" coords="2,108.00,683.39,59.81,7.77" target="#b34">Ren et al., 2022)</ref>. The network can then be scaled up by keeping the subsets the same size but having more subsets, each with its own objective function. 4 There are two main reasons for using the squared length of the activity vector as the goodness function. First, it has very simple derivatives. Second, layer normalization removes all trace of the goodness. probability that an input vector is positive (i. e. real) is given by applying the logistic function, œÉ to the goodness, minus some threshold, Œ∏</p><formula xml:id="formula_0" coords="3,241.56,99.35,262.44,33.53">p(positive) = œÉ Ô£´ Ô£≠ j y 2 j ‚àí Œ∏ Ô£∂ Ô£∏ (1)</formula><p>where y j is the activity of hidden unit j before layer normalization. The negative data may be predicted by the neural net using top-down connections, or it may be supplied externally.</p><p>2.1 Learning multiple layers of representation with a simple layer-wise goodness function</p><p>It is easy to see that a single hidden layer can be learned by making the sum squared activities of the hidden units be high for positive data and low for negative data. But if the activities of the first hidden layer are then used as input to the second hidden layer, it is trivial to distinguish positive from negative data by simply using the length of activity vector in the first hidden layer. There is no need to learn any new features. To prevent this, FF normalizes the length of the hidden vector before using it as input to the next layer <ref type="bibr" coords="3,218.31,249.04,70.06,8.64" target="#b1">(Ba et al., 2016b;</ref><ref type="bibr" coords="3,290.86,249.04,117.55,8.64" target="#b4">Carandini and Heeger, 2013)</ref> This removes all of the information that was used to determine the goodness in the first hidden layer and forces the next hidden layer to use information in the relative activities of the neurons in the first hidden layer. These relative activities are unaffected by the layer-normalization<ref type="foot" coords="3,337.57,280.10,3.49,6.05" target="#foot_0">5</ref> . To put it another way, the activity vector in the first hidden layer has a length and an orientation. The length is used to define the goodness for that layer and only the orientation is passed to the next layer.</p><p>3 Some experiments with FF</p><p>The aim of this paper is to introduce the FF algorithm and to show that it works in relatively small neural networks containing a few million connections. A subsequent paper will investigate how well it scales to large neural networks containing orders of magnitude more connections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The backpropagation baseline</head><p>Most of the experiments described in the paper use the MNIST dataset of handwritten digits. 50,000 of the official training images are used for training and 10,000 for validation during the search for good hyper-parameters. The official test set of 10,000 images is then used to compute the test error rate. MNIST has been well studied and the performance of simple neural networks trained with backpropagation is well known. This makes MNIST very convenient for testing out new learning algorithms to see if they actually work.</p><p>Sensibly-engineered convolutional neural nets with a few hidden layers typically get about 0.6% test error. In the "permutation-invariant" version of the task, the neural net is not given any information about the spatial layout of the pixels so it would perform equally well if all of the training and test images were subjected to the same random permutation of the pixels before training started. For the permutation-invariant version of the task, feed-forward neural networks with a few fully connected hidden layers of Rectified Linear Units (ReLUs) typically get about 1.4% test error<ref type="foot" coords="3,443.82,543.18,3.49,6.05" target="#foot_1">6</ref> and they take about 20 epochs to train. This can be reduced to around 1.1% test error using a variety of regularizers such as dropout <ref type="bibr" coords="3,173.06,566.67,93.98,8.64" target="#b39">(Srivastava et al., 2014)</ref> (which makes training slower) or label smoothing <ref type="bibr" coords="3,470.41,566.67,33.59,8.64;3,108.00,577.58,46.07,8.64" target="#b31">(Pereyra et al., 2017)</ref> (which makes training faster). It can be further reduced by combining supervised learning of the labels with unsupervised learning that models the distribution of images.</p><p>To summarize, 1.4% test error on the permutation-invariant version of the task without using complicated regularizers, shows that, for MNIST, a learning procedure works about as well as backpropagation<ref type="foot" coords="3,123.50,625.02,3.49,6.05" target="#foot_2">7</ref> .</p><p>Figure <ref type="figure" coords="4,240.45,149.37,3.88,8.64">1</ref>: A hybrid image used as negative data</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">A simple unsupervised example of FF</head><p>There are two main questions about FF that need to be answered. First, if we have a good source of negative data, does it learn effective multi-layer representations that capture the structure in the data? Second, where does the negative data come from? We start by trying to answer the first question using a hand-crafted source of negative data as a temporary crutch so that we can investigate the first question separately.</p><p>A common way to use contrastive learning for a supervised learning task is to first learn to transform the input vectors into representation vectors without using any information about the labels and then to learn a simple linear transformation of these representation vectors into vectors of logits which are used in a softmax to determine a probability distribution over labels. This is called a linear classifier despite its glaring non-linearity. The learning of the linear transformation to the logits is supervised, but does not involve learning any hidden layers so it does not require backpropagation of derivatives. FF can be used to perform this kind of representation learning by using real data vectors as the positive examples and corrupted data vectors as the negative examples. There are many very different ways to corrupt the data.</p><p>To force FF to focus on the longer range correlations in images that characterize shapes, we need to create negative data that has very different long range correlations but very similar short range correlations. This can be done by creating a mask containing fairly large regions of ones and zeros.</p><p>We then create hybrid images for the negative data by adding together one digit image times the mask and a different digit image times the reverse of the mask as shown in figure <ref type="figure" coords="4,406.10,427.37,3.69,8.64">1</ref>. Masks like this can be created by starting with a random bit image and then repeatedly blurring the image with a filter of the form [1/4, 1/2, 1/4] in both the horizontal and vertical directions. After repeated blurring, the image is then thresholded at 0.5.</p><p>After training a network with four hidden layers of 2000 ReLUs each for 100 epochs, we get a test error rate of 1.37% if we use the normalised activity vectors of the last three hidden layers as the inputs to a softmax that is trained to predict the label. Using the first hidden layer as part of the input to the linear classifier makes the test performance worse.</p><p>Instead of using fully connected layers we can use local receptive fields (without weight-sharing) and this improves the performance. Only one architecture was tried<ref type="foot" coords="4,356.21,534.84,3.49,6.05" target="#foot_3">8</ref> . After training for 60 epochs it gave 1.16% test error. It used "peer normalization" of the hidden activities to prevent any of the hidden units from being extremely active or permanently off<ref type="foot" coords="4,318.87,556.66,3.49,6.05" target="#foot_4">9</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A simple supervised example of FF</head><p>Learning hidden representations without using any label information is quite sensible for large models that eventually need to be able to perform a wide variety of tasks. The unsupervised learning extracts a smorgasbord of features and the individual tasks can use whichever features are helpful. But if we are only interested in one task and we want to use a small model that does not have the capacity to model the full distribution of the input data, it makes more sense to use supervised learning. One way to achieve this with FF is to include the label in the input<ref type="foot" coords="5,337.23,149.16,6.97,6.05" target="#foot_5">10</ref> . The positive data consists of an image with the correct label and the negative data consists of an image with the incorrect label. Since the only difference between positive and negative data is the label, FF should ignore all features of the image that do not correlate with the label.</p><p>MNIST images contain a black border to make life easy for convolutional neural nets. If we replace the first 10 pixels by a one of N representation of the label, it is very easy to display what the first hidden layer learns. A network with 4 hidden layers each containing 2000 ReLUs and full connectivity between layers gets 1.36% test errors on MNIST after 60 epochs. Backpropagation takes about 20 epochs to get similar test performance. Doubling the learning rate of FF and training for 40 epochs instead of 60 gives a slightly worse test error of 1.46% instead of 1.36%.</p><p>After training with FF, it is possible to classify a test digit by doing a single forward pass through the net starting from an input that consists of the test digit and a neutral label composed of ten entries of 0.1. The hidden activities in all but the first hidden layer are then used as the inputs to a softmax that has been learned during training. This is a quick but sub-optimal way to classify an image. It is better to run the net with a particular label as part of the input and accumulate the goodnesses of all but the first hidden layer. After doing this for each label separately, the label with the highest accumulated goodness is chosen. During training, a forward pass from a neutral label was used to pick hard negative labels and this made the training require about a third as many epochs.</p><p>We can augment the training data by jittering the images by up to two pixels in each direction to get 25 different shifts for each image. This uses knowledge of the spatial layout of the pixels so it is no longer permutation invariant. If we train the same net for 500 epochs with this augmented data, we get 0.64% test error which is similar to a convolutional neural net trained with backpropagation. We also get interesting receptive fields in the first hidden layer as shown in figure 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Using FF to model top-down effects in perception</head><p>All of the examples of image classification so far have used feed-forward neural networks that were learned greedily one layer at a time. This means that what is learned in later layers cannot affect what is learned in earlier layers. This seems like a major weakness compared with backpropagation.</p><p>The key to overcoming this apparent limitation of FF is to treat a static image as a rather boring video that is processed by a multi-layer recurrent neural network <ref type="bibr" coords="5,363.04,503.74,56.32,8.64" target="#b15">(Hinton, 2021)</ref>. FF runs forwards in time for both the positive and negative data, but, as figure <ref type="figure" coords="5,341.14,514.64,5.04,8.64" target="#fig_1">3</ref> shows, the activity vector at each layer is determined by the normalized activity vectors at both the layer above and the layer below at the previous time-step <ref type="foot" coords="5,180.81,534.79,6.97,6.05" target="#foot_6">11</ref> .</p><p>As an initial check that this approach actually works, we can use "video" input that consists of a static MNIST image which is simply repeated for each time-frame. The bottom layer is the pixel image and the top layer is a one-of-N representation of the digit class. There are two or three intermediate layers each of which has 2000 neurons. In a preliminary experiment, the recurrent net was run for 10 time-steps and at each time-step the even layers were updated based on the normalized activities in the odd layers and then the odd layers were updated based on the new normalized activities in the even layers. This alternating update was designed to avoid biphasic oscillations, but it appears to be unnecessary: With a little damping, synchronous updates of all hidden layers based on the normalized states at the previous time step actually learn slightly better which is good news for  The net shown in figure <ref type="figure" coords="7,205.51,113.68,5.04,8.64" target="#fig_1">3</ref> was trained on MNIST for 60 epochs. For each image, the hidden layers are initialized by a single bottom-up pass. After this the network is run for 8 synchronous iterations with damping. The performance of the network on the test data is evaluated by running it for 8 iterations with each of the 10 labels and picking the label that has the highest goodness averaged over iterations 3 to 5. It gets 1.31% test error. Negative data is generated by doing a single forward pass through the net to get probabilities for all the classes and then choosing between the incorrect classes in proportion to their probabilities. This makes the training much more efficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Using predictions from the spatial context as a teacher</head><p>In the recurrent net, the objective is to have good agreement between the input from the layer above and the input from the layer below for positive data and bad agreement for negative data <ref type="foot" coords="7,473.29,242.51,6.97,6.05" target="#foot_7">12</ref> . In a network with spatially local connectivity, this has a very desirable property: The top-down input will be determined by a larger region of the image and will be the result of more stages of processing so it can be viewed as a contextual prediction for what should be produced by the bottom-up input which is based on a more local region of the image. If the input is changing over time, the top-down input will be based on older input data so it will have to learn to predict the representations of the bottom-up input. If we reverse the sign of the objective function and aim for low squared activities for positive data, the top-down input should learn to cancel out the bottom-up input on positive data which looks very like predictive coding <ref type="bibr" coords="7,263.90,331.46,93.65,8.64" target="#b33">(Rao and Ballard, 1999;</ref><ref type="bibr" coords="7,359.93,331.46,99.91,8.64" target="#b40">van den Oord et al., 2018)</ref>. The layer normalization means that plenty of information gets sent to the next layer even when the cancellation works pretty well. If all the prediction errors are small, they get exaggerated by the normalization thus making them more resistant to noise in transmission.</p><p>The idea of learning by using a contextual prediction as a teaching signal for local feature extraction has been around for a long time but it has been difficult to make it work in neural networks using the spatial context as opposed to the one-sided temporal context. The obvious method of using the consensus of the top-down and bottom-up inputs as the teaching signal for both the top-down and bottom-up weights leads to collapse. This problem can be reduced by using the contextual predictions from other images to create the negative pairs, but the use of negative data rather than any negative internal representation seems more robust and does not require any restrictions such as only using the past to predict the future.</p><p>4 Experiments with CIFAR-10 CIFAR-10 ( <ref type="bibr" coords="7,155.57,519.53,116.52,8.64" target="#b25">Krizhevsky and Hinton, 2009)</ref> has 50,000 training images that are 32 x 32 with three color channels for each pixel. Each image, therefore, has 3072 dimensions. The images have complicated backgrounds that are highly variable and cannot be modeled well given such limited training data. A fully connected net with two or three hidden layers overfits badly when trained with backpropagation unless the hidden layers are very small, so nearly all of the reported results are for convolutional nets.</p><p>Since FF is intended for networks where weight-sharing is not feasible, it was compared with a backpropagation net that used local receptive fields to limit the number of weights without seriously restricting the number of hidden units. The aim was simply to show that with plenty of hidden units, FF is comparable in performance to backpropagation for images that contain highly variable backgrounds.</p><p>The networks contained two or three hidden layers of 3072 ReLUs each. Each hidden layer is a 32 x 32 topographic map with 3 hidden units at each location. Each hidden unit has an 11 x 11 receptive field in the layer below so it has 363 bottom-up inputs<ref type="foot" coords="7,319.98,659.73,6.97,6.05" target="#foot_8">13</ref> . For FF, hidden units in the last hidden layer After training with FF, a single forward pass through the net is a quick but sub-optimal way to classify an image. It is better to run the net with a particular label as the top-level input and record the average goodness over the middle iterations. After doing this for each label separately, the label with the highest goodness is chosen. For a large number of labels, a single forward pass could be used to get a candidate list of which labels to evaluate more thoroughly.</p><p>have 10 top-down inputs and in other layers they have up to 363 top-down inputs from an 11 x 11 receptive field in the layer above <ref type="foot" coords="8,237.61,560.84,6.97,6.05" target="#foot_9">14</ref> .</p><p>Table <ref type="table" coords="8,133.07,578.90,5.08,8.64" target="#tab_0">1</ref> shows the test performance of networks trained with backpropagation and FF, with both methods using weight-decay to reduce overfitting. To test a net trained with FF, we can either use a single forward pass or we can let the network run for 10 iterations with the image and each of the 10 labels and accumulate the energy for a label over iterations 4 to 6 (that is when the goodness-based error is the lowest). Although the test performance of FF is worse than backpropagation it is only slightly worse, even when there are complicated confounding backgrounds. Also, the gap between the two procedures does not increase with more hidden layers. However, backpropagation reduces the training error much more quickly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Sleep</head><p>FF would be much easier to implement in a brain if the positive data was processed when awake and the negative data was created by the network itself and processed during sleep.</p><p>In an early draft of this paper I reported that it was possible to do multiple updates on positive data followed by multiple updates on negative data, generated by the net itself, with very little loss in performance. The example I used was predicting the next character in a sequence from the previous ten character window. The use of discrete symbols rather than real-valued images makes it easier to generate sequences from the model. I have been unable to replicate this result and I now suspect it was due to a bug. Using the sum of squared activities as the goodness function, alternating between thousands of weight updates on positive data and thousands on negative data only works if the learning rate is very low and the momentum is extremely high. It is possible that a different goodness function would allow the positive and negative phases of learning to be separated, but this remains to be shown and it is probably the most important outstanding question about FF as a biological model.</p><p>If it is possible to separate the positive and negative phases it would be interesting to see if eliminating the negative phase updates for a while, leads to effects that mimic the devastating effects of severe sleep deprivation.</p><p>6 How FF relates to other contrastive learning techniques</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Relationship to Boltzmann Machines</head><p>In the early 1980s there were two promising learning procedures for deep neural networks. One was backpropagation and the other was Boltzmann Machines <ref type="bibr" coords="9,356.13,359.40,116.13,8.64" target="#b17">(Hinton and Sejnowski, 1986</ref>) which performed unsupervised contrastive learning. A Boltzmann Machine is a network of stochastic binary neurons with pairwise connections that have the same weight in both directions. When it is running freely with no external input, a Boltzmann machine repeatedly updates each binary neuron by setting it to the on state with a probability equal to the logistic of the total input it receives from other active neurons. This simple update procedure eventually samples from the equilibrium distribution in which each global configuration (an assignment of binary states to all of the neurons) has a log probability proportional to its negative energy. The negative energy is simply the sum of the weights between all pairs of neurons that are on in that configuration.</p><p>A subset of the neurons in a Boltzmann Machine is "visible" and binary data vectors are presented to the network by clamping them on the visible neurons and then letting it repeatedly update the states of the remaining, hidden neurons. The aim of Boltzmann machine learning is to make the distribution of binary vectors on the visible neurons when the network is running freely match the data distribution. Very surprisingly, the Kullback-Liebler divergence between the data distribution and the model distribution exhibited on the visible neurons by the freely running Boltzmann machine at thermal equilibrium has a very simple derivative w.r.t. any weight, w ij in the network:</p><formula xml:id="formula_1" coords="9,185.28,551.53,318.73,23.23">‚àÇKL(P data ||P model ) ‚àÇw ij = &lt; s i s j &gt; data ‚àí &lt; s i s j &gt; model (2)</formula><p>where the angle brackets denote an expectation over the stochastic fluctuations at thermal equilibrium and also the data for the first term.</p><p>The exciting thing about this result is that it gives derivatives for weights deep within the network without ever propagating error derivatives explicitly. Instead, it propagates neural activities in two different phases which were intended to correspond to wake and sleep. Unfortunately, the mathematical simplicity of the learning rule comes at a very high price. It requires a deep Boltzmann Machine to approach its equilibrium distribution and this makes it impractical as a machine learning technique and implausible as a model of cortical learning: There is not time for a large network to approach its equilibrium distribution during perception. There is also no evidence for detailed symmetry of connections in cortex and there is no obvious way to learn sequences. Moreover, the Boltzmann machine learning procedure fails if many positive updates of the weights are followed by many negative updates as would be required if the negative phase corresponded to REM sleep <ref type="bibr" coords="9,479.17,713.51,25.07,8.64;10,108.00,75.48,82.52,8.64" target="#b7">(Crick and Mitchison, 1983)</ref>. <ref type="foot" coords="10,194.75,73.81,6.97,6.05" target="#foot_10">15</ref> . Despite these insuperable objections, Boltzmann Machine learning remains intellectually interesting because it replaces the forward and backward passes of backpropagation with two iterative settlings that work in exactly the same way, but with different boundary conditions on the visible neurons -clamped to data versus free.</p><p>The Boltzmann machine can be seen as a combination of two ideas:</p><p>1. Learn by minimizing the free energy on real data and maximizing the free energy on negative data generated by the network itself. 2. Use the Hopfield energy as the energy function and use repeated stochastic updates to sample global configurations from the Boltzmann distribution defined by the energy function.</p><p>Retrospectively, it is obvious that the first idea, which is about contrastive learning, could be used with many other energy functions. For example, <ref type="bibr" coords="10,284.63,208.90,86.65,8.64" target="#b16">(Hinton et al., 2006a)</ref> uses the output of a feedforward neural net to define the energy and then uses backpropagation through this net to compute the derivatives of the energy w.r.t. both the weights and the visible states. Negative data is then generated by following the derivatives of energy w.r.t. the visible states. This approach is used very effectively in <ref type="bibr" coords="10,118.22,252.54,93.87,8.64" target="#b10">(Grathwohl et al., 2019)</ref>. It is also obvious that the negative data does not have to be produced by sampling data vectors from the Boltzmann distribution defined by the energy function. Methods like contrastive divergence <ref type="bibr" coords="10,201.59,274.36,60.56,8.64" target="#b19">(Hinton, 2002)</ref> , for example, greatly improve the efficiency of learning in Boltzmann machines with a single hidden layer by not sampling from the equilibrium distribution.</p><p>But the mathematical simplicity of equation 2 and the fact that the stochastic update procedure performs correct Bayesian integration over all possible hidden configurations were just too beautiful to abandon, so the idea of replacing the forward and backward passes of backpropagation with two settlings that only need to propagate neural activities remained entangled with the complexities of Markov Chain Monte Carlo.</p><p>FF combines the contrastive learning from Boltzmann machines with a simple, local goodness function that is far more tractable than the free energy of a network of binary stochastic neurons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Relationship to Generative Adversarial Networks</head><p>A GAN <ref type="bibr" coords="10,141.33,410.81,100.49,8.64" target="#b9">(Goodfellow et al., 2014)</ref> uses a multi-layer neural network to generate data and it trains its generative model by using a multi-layer discriminative network to give it derivatives w.r.t. the output of the generative model of the probability that the output is real data as opposed to generated data. GANs are tricky to train because the discriminative and generative models are competing. In practice they generate very nice images but suffer from mode collapse: There can be large regions of image space in which they never generate examples. Also they use backpropagation to adapt each network so it is hard to see how to implement them in cortex.</p><p>FF can be viewed as a special case of a GAN in which every hidden layer of the discriminative network makes its own greedy decision about whether the input is positive or negative so there is no need to backpropagate to learn the discriminative model. There is also no need to backpropagate to learn the generative model because instead of learning its own hidden representations, it just reuses the representations learned by the discriminative model<ref type="foot" coords="10,329.83,534.62,6.97,6.05" target="#foot_11">16</ref> . The only thing the generative model has to learn is how to convert those hidden representations into generated data and if this is done using a linear transformation to compute the logits of a softmax no backpropagation is required. One advantage of using the same hidden representations for both models is that it eliminates the problems that arise when one model learns too fast relative to the other model. It also eliminates mode collapse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Relationship to contrastive methods that compare representations of two different image crops</head><p>There is a family of self-supervised contrastive methods like SimCLR <ref type="bibr" coords="10,390.11,634.54,67.05,8.64" target="#b42">(Wu et al., 2018;</ref><ref type="bibr" coords="10,459.66,634.54,45.59,8.64;10,108.00,645.45,27.66,8.64" target="#b5">Chen et al., 2020a;</ref><ref type="bibr" coords="10,138.55,645.45,89.94,8.64" target="#b2">Bachman et al., 2019;</ref><ref type="bibr" coords="10,231.38,645.45,63.41,8.64" target="#b14">He et al., 2020;</ref><ref type="bibr" coords="10,297.67,645.45,70.76,8.64" target="#b11">Grill et al., 2020;</ref><ref type="bibr" coords="10,371.31,645.45,78.65,8.64" target="#b6">Chen et al., 2020b)</ref> that learn by optimizing an objective function that favors agreement between the representations of two different crops from the same image and disagreement between the representations of crops from two different images. These methods generally use many layers to extract the representations of the crops and they train these layers by backpropagating the derivatives of the objective function. They do not work if the two crops always overlap in exactly the same way because then they can simply report the intensities of the shared pixels and get perfect agreement.</p><p>In a real neural network, it would be non-trivial to measure the agreement between two different representations 17 and there is no obvious way to extract the representations of two crops at the same time using the same weights.</p><p>FF uses a different way to measure agreement, which seems easier for a real neural network. Many different sources of information provide input to the same set of neurons. If the sources agree on which neurons to activate there will be positive interference resulting in high squared activities and if they disagree the squared activities will be lower 18 . Measuring agreement by using positive interference is a lot more flexible than comparing two different representation vectors because there is no need to arbitrarily divide the input into two separate sources.</p><p>A major weakness of SimCLR-like methods is that a lot of computation is used to derive the representations of two image crops, but the objective function only provides a modest amount of constraint on the representations and this limits the rate at which information about the domain can be injected into the weights. To make the representation of a crop be closer to its correct mate than to a million possible alternatives only takes 20 bits of information. This problem seems even worse for FF since it only takes one bit to distinguish a positive case from a negative one.</p><p>The solution to this poverty of constraint is to divide each layer into many small blocks and to force each block separately to use the length of its pre-normalized activity vector to decide between positive and negative cases. The information required to satisfy the constraints then scales linearly with the number of blocks which is much better than the logarithmic scaling achieved by using a larger contrast set in SimCLR-like methods. An example of this approach using spatially localized blocks can be found in <ref type="bibr" coords="11,172.19,381.03,71.93,8.64" target="#b28">L√∂we et al. (2019)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">A problem with stacked contrastive learning</head><p>An obvious unsupervised way to learn multiple layers of representation is to first learn one hidden layer that captures some of the structure in the data and to then treat the activity vectors in this layer as data and apply the same unsupervised learning algorithm again. This is how multiple layers of representation are learned using Restricted Boltzmann machines (RBMs) <ref type="bibr" coords="11,401.97,468.31,91.17,8.64" target="#b20">(Hinton et al., 2006b)</ref> or stacked autoencoders <ref type="bibr" coords="11,195.32,479.21,80.38,8.64" target="#b3">(Bengio et al., 2007)</ref>. But it has a fatal flaw.</p><p>Suppose we map some random noise images through a random weight matrix. The resulting activity vectors will have correlational structure that is created by the weight matrix and has nothing to do with the data. When unsupervised learning is applied to these activity vectors it will discover some of this structure, but that tells the system nothing about the external world 19 .</p><p>The original Boltzmann Machine learning algorithm was designed to avoid this flaw <ref type="bibr" coords="11,454.96,544.72,49.04,8.64;11,108.00,555.63,66.71,8.64" target="#b17">(Hinton and Sejnowski, 1986</ref>) (page 297) by contrasting statistics caused by two different external boundary conditions. This cancels out all the structure that is just the result of other parts of the network. When contrasting positive and negative data, there is no need to restrict the wiring or have random spatial relationships between crops to prevent the network from cheating. This makes it easy to have a large number of interconnected groups of neurons, each with its own objective of distinguishing positive from negative data.</p><p>17 An obvious exception is when the two representations occur at adjacent times on the same set of neurons. The temporal derivatives of the neural activities then represent the amount of disagreement.</p><p>18 It is possible to measure agreement much more sharply if the inputs are spikes which arrive at particular times and the post-synaptic neurons only fire if they get many spikes within a small time window. 19 Stacked RBMs can deal with this issue, though not very well, by initializing each RBM to have the transpose of the weights of the previous RBM. This means that the initial weights have already captured the structure induced by the previous weight matrix and changes to those initial weights may capture structure due to the external world, but a lot of the capacity is used up just modeling the previous weight matrix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Learning fast and slow</head><p>If there is full connectivity between layers, it can be shown that the weight updates used to change the goodness function of a layer for a particular input vector x have no effect on the layer-normalized output of that layer when the input vector is x. The vector of increments of the incoming weights for hidden neuron j is given by:</p><formula xml:id="formula_2" coords="12,256.87,142.81,247.13,24.72">‚àÜw j = 2 ‚àÇlog(p) ‚àÇ j y 2 j y j x<label>(3)</label></formula><p>where y j is the activity of the ReLU before layer normalization, w j is the vector of incoming weights of neuron j and is the learning rate.</p><p>After the weight update has occurred, the change in the activity of neuron j is simply the scalar product ‚àÜw j x. The only term that depends on j in the change of activity caused by the weight update is y j , so all the hidden activities change by the same proportion and the weight update does not change the orientation of the activity vector.</p><p>The fact that the weight update does not change the layer normalized output for that input vector means that it is possible to perform simultaneous online weight updates in many different layers because the weight updates in earlier layers do not change the activity vectors in later layers for that input vector. It is possible to change all the weights in one step so that every layer exactly achieves a desired goodness of S * for input vector x. Assuming that the input vector and all of the layer-normalized hidden vectors are of length 1, the learning rate that achieves this is given by:</p><formula xml:id="formula_3" coords="12,283.36,323.24,220.65,24.06">= S * S L ‚àí 1 (4)</formula><p>where S L is the current sum of squared activities of layer L before layer normalization.</p><p>Currently, we do not exploit this interesting property of FF because we still use mini-batches, but the ability of a deep neural net to absorb a lot of information from a single training case by jumping to a set of weights that handles that case perfectly could be of interest to psychologists who are tired of creeping down gradients 20</p><p>Unlike backpropagation, FF has no problem learning if we insert a black box between layers that are being trained by FF. The black box applies an unknown and possibly stochastic transformation to the output of one layer and presents this transformed activity vector as the input to the next layer. One interesting possibility is to make these black boxes be neural nets with a few hidden layers. If these hidden layers learn very slowly, the "outer loop" FF learning can quickly adapt to new data under the assumption that the black boxes are stationary. Slow learning in the black boxes can then improve the system over a much longer timescale. For example, a slow reinforcement learning procedure could add small random noise vectors to the inputs to neurons inside the black box and then multiply these activity perturbation vectors by the change in the cost function used by the positive phase of FF to get a noisy but unbiased estimate of the derivative of the FF cost function w.r.t. the activities of neurons inside the black box <ref type="bibr" coords="12,190.46,529.47,67.65,8.64" target="#b34">(Ren et al., 2022)</ref>.</p><p>individual bits in the digital representation of a number and then performing O(n 2 ) single bit operations to multiply two n-bit numbers together. Unfortunately, it is difficult to implement the backpropagation procedure in an equally efficient way, so people have resorted to using A-to-D converters and digital computations for computing gradients <ref type="bibr" coords="13,352.98,108.20,83.66,8.64" target="#b22">(Kendall et al., 2020)</ref>. The use of two forward passes instead of a forward and a backward pass should make these A-to-D converters unnecessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Mortal Computation</head><p>General purpose digital computers were designed to faithfully follow instructions because it was assumed that the only way to get a general purpose computer to perform a specific task was to write a program that specified exactly what to do in excruciating detail. This is no longer true, but the research community has been slow to comprehend the long-term implications of deep learning for the way computers are built. More specifically the community has clung to the idea that the software should be separable from the hardware so that the same program or the same set of weights can be run on a different physical copy of the hardware. This makes the knowledge contained in the program or the weights immortal: The knowledge does not die when the hardware dies<ref type="foot" coords="13,418.14,261.47,6.97,6.05" target="#foot_13">21</ref> .</p><p>The separation of software from hardware is one of the foundations of Computer Science and it has many benefits. It makes it possible to study the properties of programs without worrying about electrical engineering. It makes it possible to write a program once and copy it to millions of computers. It makes it possible to compute derivatives on huge data-sets by using many copies of the same model running in parallel. If, however, we are willing to abandon immortality it should be possible to achieve huge savings in the energy required to perform a computation and in the cost of fabricating the hardware that executes the computation. We can allow large and unknown variations in the connectivity and non-linearities of different instances of hardware that are intended to perform the same task and then rely on a learning procedure to discover parameter values that make effective use of the unknown properties of each particular instance of the hardware. These parameter values are only useful for that specific hardware instance, so the computation they perform is mortal: it dies with the hardware.</p><p>Even though it makes no sense to copy the parameter values to a different piece of hardware that works differently, there is a more biological way of transferring what has been learned by one piece of hardware to a different piece of hardware. For a task like classification of objects in images, what we are really interested in is the function relating pixel intensities to class labels, not the parameter values that implement that function in a particular piece of hardware. The function itself can be transferred (approximately) to a different piece of hardware by using distillation <ref type="bibr" coords="13,423.17,470.47,77.97,8.64" target="#b18">(Hinton et al., 2014)</ref>:</p><p>The new hardware is trained not only to give the same answers as the old hardware but also to output the same probabilities for incorrect answers. These probabilities are a much richer indication of how the old model generalizes than just the label it thinks is most likely. So by training the new model to match the probabilities of incorrect answers we are training it to generalize in the same way as the old model. This is a rare example of neural net training actually optimizing what we care about: generalization.</p><p>Distillation works best when the teacher gives highly informative outputs that reveal a lot about the teacher's internal representations. This may be one of the major functions of language. Rather than viewing a descriptive sentence as a piece of symbolic knowledge that needs to be stored in some unambiguous internal language we could view it as a way of providing information about the speaker's internal vector representations that allows the hearer to learn similar vector representations <ref type="bibr" coords="13,107.67,606.85,78.08,8.64" target="#b32">(Raghu et al., 2020)</ref>. From this perspective, a tweet that is factually incorrect could nevertheless be a very effective way to transfer features used for interpreting the world to a set of followers whose immediate intuitions would then be the same as the teacher's. If language has evolved to facilitate the learning of internal representation vectors by the members of a culture, it is not surprising that training a large neural network on massive amounts of language is such an effective way to capture the world view of that culture.</p><p>If you want your trillion parameter neural net to only consume a few watts, mortal computation may be the only option. Its feasibility rests on finding a learning procedure that can run efficiently in hardware whose precise details are unknown, and the Forward-Forward algorithm is a promising candidate, though it remains to be seen how well it scales to large neural networks.</p><p>If, however, you are prepared to pay the energy costs required to run identical models on many copies of the same hardware, the ability to share weights across large models provides a much higher bandwidth way to share knowledge than distillation and may take intelligence to the next level.</p><p>10 Future work</p><p>The investigation of the Forward-Forward algorithm has only just begun and there are many open questions:</p><p>‚Ä¢ Can FF produce a generative model of images or video that is good enough to create the negative data needed for unsupervised learning?</p><p>‚Ä¢ What is the best goodness function to use? This paper uses the sum of the squared activities in most of the experiments but minimizing the sum squared activities for positive data and maximizing it for negative data seems to work slightly better. More recently, just minimizing the sum of the unsquared activities on positive data (and maximizing on negative) has worked well<ref type="foot" coords="14,192.83,277.00,6.97,6.05" target="#foot_14">22</ref> .</p><p>‚Ä¢ What is the best activation function to use? So far, only ReLUs have been explored. There are many other possibilities whose behaviour is unexplored in the context of FF. Making the activation be the negative log of the density under a t-distribution is an interesting possibility <ref type="bibr" coords="14,143.54,326.85,88.12,8.64" target="#b30">(Osindero et al., 2006)</ref>.</p><p>‚Ä¢ For spatial data, can FF benefit from having lots of local goodness functions for different regions of the image <ref type="bibr" coords="14,232.24,353.21,79.47,8.64" target="#b28">(L√∂we et al., 2019)</ref>? If this can be made to work, it should allow learning to be much faster.</p><p>‚Ä¢ For sequential data, is it possible to use fast weights to mimic a simplified transformer <ref type="bibr" coords="14,489.62,379.58,14.39,8.64;14,143.87,390.49,47.27,8.64" target="#b0">(Ba et al., 2016a</ref>)?</p><p>‚Ä¢ Can FF benefit from having a set of feature detectors that try to maximize their squared activity and a set of constraint violation detectors that try to minimize their squared activity <ref type="bibr" coords="14,143.54,427.76,84.51,8.64" target="#b41">(Welling et al., 2003)</ref>?</p><p>11 Acknowledgements</p><p>First I would like to thank Jeff Dean and David Fleet for creating the environment at Google that made this research possible. Many people made helpful contributions including, in no particular order, Simon Kornblith, Mengye Ren, Renjie Liao, David Fleet, Ilya Sutskever, Terry Sejnowski, Peter Dayan, Chris Williams, Yair Weiss, Relu Patrascu and Max Welling.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="6,108.00,360.36,396.00,8.64;6,108.00,371.27,334.45,8.64;6,127.80,86.61,356.40,262.35"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The receptive fields of 100 neurons in the first hidden layer of the network trained on jittered MNIST. The class labels are represented in the first 10 pixels of each image.</figDesc><graphic coords="6,127.80,86.61,356.40,262.35" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="6,196.60,696.75,218.80,8.64;6,127.80,417.10,356.40,268.26"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The recurrent network used to process video.</figDesc><graphic coords="6,127.80,417.10,356.40,268.26" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" coords="8,107.69,73.55,396.31,404.04"><head>Table 1 :</head><label>1</label><figDesc>A comparison of backpropagation and FF on CIFAR-10 using non-convolutional nets with local receptive fields of size 11x11 and 2 or 3 hidden layers. One version of FF is trained to maximize the sum of the squared activities on positive cases. The other version is trained to minimize it and this gives slightly better test performance.</figDesc><table coords="8,159.25,73.55,293.50,330.98"><row><cell>learning</cell><cell>testing</cell><cell>number of</cell><cell>training %</cell><cell>test %</cell></row><row><cell>procedure</cell><cell>procedure</cell><cell cols="3">hidden layers error rate error rate</cell></row><row><cell>BP</cell><cell></cell><cell>2</cell><cell>0</cell><cell>37</cell></row><row><cell>FF</cell><cell>compute goodness</cell><cell>2</cell><cell>20</cell><cell>41</cell></row><row><cell>min ssq</cell><cell>for every label</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>one-pass</cell><cell>2</cell><cell>31</cell><cell>45</cell></row><row><cell>min ssq</cell><cell>softmax</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>compute goodness</cell><cell>2</cell><cell>25</cell><cell>44</cell></row><row><cell>max ssq</cell><cell>for every label</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>one-pass</cell><cell>2</cell><cell>33</cell><cell>46</cell></row><row><cell>max ssq</cell><cell>softmax</cell><cell></cell><cell></cell><cell></cell></row><row><cell>BP</cell><cell></cell><cell>3</cell><cell>2</cell><cell>39</cell></row><row><cell>FF</cell><cell>compute goodness</cell><cell>3</cell><cell>24</cell><cell>41</cell></row><row><cell>min ssq</cell><cell>for every label</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>one-pass</cell><cell>3</cell><cell>32</cell><cell>44</cell></row><row><cell>min ssq</cell><cell>softmax</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>compute goodness</cell><cell>3</cell><cell>21</cell><cell>44</cell></row><row><cell>max ssq</cell><cell>for every label</cell><cell></cell><cell></cell><cell></cell></row><row><cell>FF</cell><cell>one-pass</cell><cell>3</cell><cell>31</cell><cell>46</cell></row><row><cell>max ssq</cell><cell>softmax</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_0">FF uses the simplest version of layer normalization which does not subtract the mean before dividing by the length of the activity vector.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_1">I have trained thousands of different neural networks on MNIST and, in the spirit of Ramon y Cajal, I believe that it is more informative to report the performance of the non-existent typical net than to report the performance of any particular net.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_2">Some papers on biologically plausible alternatives to backpropagation report test error rates greater than 2% on permutation invariant MNIST. This indicates that the learning procedure does not work nearly as well as backpropagation or that the authors failed to tune it properly.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_3">The first hidden layer used a 4x4 grid of locations with a stride of 6, a receptive field of 10x10 pixels and 128 channels at each location. The second hidden layer used a 3x3 grid with 220 channels at each grid point. The receptive field was all the channels in a square of 4 adjacent grid points in the layer below. The third hidden layer used a 2x2 grid with 512 channels and, again, the receptive field was all the channels in a square of 4 adjacent grid points in the layer below. This architecture has approximately 2000 hidden units per layer.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_4">It is helpful to measure the average activity of a unit and to introduce an additional derivative that causes this average activity to regress towards some sensible target value. To avoid having to pick a target value that might not be compatible with the demands of the task, peer normalization uses the running mean of the average activities of all the hidden units in the layer as the target. When the activity of a ReLU is zero, there is no derivative with respect to the input to the ReLU but we pretend that there is so that dead units have their incoming weights increased. The coefficient determining the strength of this regularizer is set so that the mean activities of the units in a layer are similar, but not too similar.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_5">This way of using FF for supervised learning has some similarity to the error forward-propagation procedure<ref type="bibr" coords="5,107.70,673.42,74.52,7.77" target="#b23">(Kohan et al., 2018)</ref> and the more recent signal propagation procedure<ref type="bibr" coords="5,371.91,673.42,74.52,7.77" target="#b24">(Kohan et al., 2022)</ref> which also use the label as an additional input, but FF does not require the hidden representations of the label and the hidden representations of the image to remain separate.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11" xml:id="foot_6">There is clearly no problem adding skip-layer connections, but the simplest architecture is the easiest to understand and the aim of this paper is understanding, not performance on benchmarks.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_7">There is also pressure to make the different parts of the bottom-up input agree on which neurons to activate, and the same goes for the top-down input.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_8">For hidden neurons near the edge of the map the receptive field is truncated at the edge of the image.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="14" xml:id="foot_9">An inefficient but very simple way to implement this connectivity on a GPU is to learn with full connectivity but to use a precomputed mask to reset all of the non-existent weights to zero after each weight update. This approach makes it very easy to explore any kind of connectivity between layers</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_10">The need to interleave positive and negative updates on a fine timescale can be somewhat reduced by storing the average of &lt; sisj &gt; model during sleep and subtracting this baseline from the positive updates during wake, but this trick fails as soon as the weight updates make the stored baseline significantly incorrect. The trick works significantly better for FF because, unlike the Boltzmann machine, the updates in the positive phase stop changing the weights once the layers are correctly classifying an example as positive.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_11">A similar trick has been used for sharing trees<ref type="bibr" coords="10,291.23,714.16,115.42,7.77" target="#b29">(Nock and Guillame-Bert, 2022)</ref>.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_12">The relevance of FF to analog hardware An energy efficient way to multiply an activity vector by a weight matrix is to implement activities as voltages and weights as conductances. Their products, per unit time, are charges which add themselves. This seems a lot more sensible than driving transistors at high power to model the20  The perceptron convergence procedure<ref type="bibr" coords="12,266.31,624.50,62.75,7.77" target="#b36">(Rosenblatt, 1958</ref>) also has the property that it is possible to make big updates to the weights without using a learning rate. For perceptrons, any set of weights in the "feasible" region of weight-space will give the correct binary classification for all of the training examples. Sadly, there is no feasible region if the positive and negative examples are not linearly separable. Given a training example that is currently misclassified, the weights can be updated in a single step to make the classification correct for that example. The weight update is perpendicular to the hyper-plane that separates good weights from bad weights for that particular example and the step size can be chosen to move the weights to the correct side of that hyperplane. The update may cause many other examples to be misclassified, but the perceptron convergence procedure does not converge by reducing the number of errors or the sum squared error. It works by always getting closer to the feasible reqion. Multi-layer neural networks trained with backpropagation are not multi-layer perceptrons.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="21" xml:id="foot_13">Assuming the program or weights are faithfully stored in some medium.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="22" xml:id="foot_14">When using the unsquared activities, the layer normalization must normalize the sum of the activities, not the sum of their squares.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct coords="14,108.00,560.03,396.00,8.64;14,117.96,570.76,285.51,8.82" xml:id="b0">
	<analytic>
		<title level="a" type="main">MLLE: Modified Locally Linear Embedding Using Multiple Weights</title>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Ba</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">V</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><forename type="middle">Z</forename><surname>Leibo</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">C</forename><surname>Ionescu</surname></persName>
		</author>
		<idno type="DOI">10.7551/mitpress/7503.003.0204</idno>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 19</title>
				<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="2016">2016a</date>
			<biblScope unit="page">29</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="14,108.00,590.76,395.99,8.82;14,117.96,601.67,75.27,8.59" xml:id="b1">
	<analytic>
		<title level="a" type="main">Preprint repository arXiv achieves milestone million uploads</title>
		<author>
			<persName coords=""><forename type="first">J</forename><forename type="middle">L</forename><surname>Ba</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><forename type="middle">R</forename><surname>Kiros</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1063/pt.5.028530</idno>
		<idno type="arXiv">arXiv:1607.06450</idno>
	</analytic>
	<monogr>
		<title level="j">Physics Today</title>
		<title level="j" type="abbrev">Phys. Today</title>
		<idno type="ISSNe">1945-0699</idno>
		<imprint>
			<date type="published" when="2016">2016b</date>
			<publisher>AIP Publishing</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="14,108.00,621.85,396.00,8.64;14,117.96,632.76,387.28,8.64;14,117.96,643.49,386.04,8.82;14,117.22,654.58,152.74,8.64" xml:id="b2">
	<analytic>
		<title level="a" type="main">Distribution of Mutual Information</title>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Bachman</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><forename type="middle">D</forename><surname>Hjelm</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">W</forename><surname>Buchwalter</surname></persName>
		</author>
		<idno type="DOI">10.7551/mitpress/1120.003.0056</idno>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 14</title>
				<editor>
			<persName><forename type="first">H</forename><surname>Wallach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Larochelle</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Beygelzimer</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><surname>Fox</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Garnett</surname></persName>
		</editor>
		<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="15535" to="15545" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="14,108.00,674.58,396.00,8.64;14,117.96,685.31,100.05,8.82" xml:id="b3">
	<analytic>
		<title level="a" type="main">Greedy Layer-Wise Training of Deep Networks</title>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Lamblin</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Popovici</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">H</forename><surname>Larochelle</surname></persName>
		</author>
		<idno type="DOI">10.7551/mitpress/7503.003.0024</idno>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 19</title>
				<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="2006">2007. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,75.30,396.00,8.82;15,117.65,86.21,145.34,8.82" xml:id="b4">
	<analytic>
		<title level="a" type="main">Normalization as a canonical neural computation</title>
		<author>
			<persName><forename type="first">Matteo</forename><surname>Carandini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">J</forename><surname>Heeger</surname></persName>
		</author>
		<idno type="DOI">10.1038/nrn3136</idno>
	</analytic>
	<monogr>
		<title level="j">Nature Reviews Neuroscience</title>
		<title level="j" type="abbrev">Nat Rev Neurosci</title>
		<idno type="ISSN">1471-003X</idno>
		<idno type="ISSNe">1471-0048</idno>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="51" to="62" />
			<date type="published" when="2013">2013</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,106.08,396.00,8.64;15,117.96,116.81,386.04,8.82;15,117.68,127.71,114.01,8.82" xml:id="b5">
	<analytic>
		<title level="a" type="main">A simple framework for contrastive learning of visual representations</title>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Kornblith</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 37th International Conference on Machine Learning</title>
				<meeting>the 37th International Conference on Machine Learning</meeting>
		<imprint>
			<date type="published" when="2020">2020a</date>
			<biblScope unit="page" from="1597" to="1607" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,147.58,396.00,8.64;15,117.96,158.31,253.44,8.82" xml:id="b6">
	<monogr>
		<title level="m" type="main">Big self-supervised models are strong semi-supervised learners</title>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Kornblith</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Swersky</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.10029</idno>
		<imprint>
			<date type="published" when="2020">2020b</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,178.00,349.69,8.82" xml:id="b7">
	<analytic>
		<title level="a" type="main">The function of dream sleep</title>
		<author>
			<persName><forename type="first">Francis</forename><surname>Crick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graeme</forename><surname>Mitchison</surname></persName>
		</author>
		<idno type="DOI">10.1038/304111a0</idno>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<title level="j" type="abbrev">Nature</title>
		<idno type="ISSN">0028-0836</idno>
		<idno type="ISSNe">1476-4687</idno>
		<imprint>
			<biblScope unit="volume">304</biblScope>
			<biblScope unit="issue">5922</biblScope>
			<biblScope unit="page" from="111" to="114" />
			<date type="published" when="1983-07">1983</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,197.69,395.99,8.82;15,117.96,208.60,88.10,8.82" xml:id="b8">
	<analytic>
		<title level="a" type="main">Motivated Reinforcement Learning</title>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Dayan</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.7551/mitpress/1120.003.0006</idno>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 14</title>
				<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,228.47,396.00,8.64;15,117.96,239.20,386.04,8.82;15,117.96,250.11,107.91,8.82" xml:id="b9">
	<analytic>
		<title level="a" type="main">Generative adversarial networks</title>
		<author>
			<persName><forename type="first">Ian</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean</forename><surname>Pouget-Abadie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mehdi</forename><surname>Mirza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bing</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Warde-Farley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sherjil</forename><surname>Ozair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<idno type="DOI">10.1145/3422622</idno>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<title level="j" type="abbrev">Commun. ACM</title>
		<idno type="ISSN">0001-0782</idno>
		<idno type="ISSNe">1557-7317</idno>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="139" to="144" />
			<date type="published" when="2014">2014</date>
			<publisher>Association for Computing Machinery (ACM)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,269.97,397.75,8.64;15,117.39,280.70,386.62,8.82;15,117.96,291.61,75.27,8.59" xml:id="b10">
	<monogr>
		<title level="m" type="main">Your classifier is secretly an energy based model and you should treat it like one</title>
		<author>
			<persName coords=""><forename type="first">W</forename><surname>Grathwohl</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K.-C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J.-H</forename><surname>Jacobsen</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Duvenaud</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Swersky</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1912.03263</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="15,108.00,311.48,397.25,8.64;15,117.96,322.39,387.78,8.64;15,117.96,333.12,363.94,8.82" xml:id="b11">
	<monogr>
		<title level="m" type="main">Bootstrap your own latent: A new approach to self-supervised learning</title>
		<author>
			<persName coords=""><forename type="first">J.-B</forename><surname>Grill</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Strub</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Altch√©</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">C</forename><surname>Tallec</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><forename type="middle">H</forename><surname>Richemond</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">E</forename><surname>Buchatskaya</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">C</forename><surname>Doersch</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><forename type="middle">A</forename><surname>Pires</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Z</forename><forename type="middle">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><forename type="middle">G</forename><surname>Azar</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Piot</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Munos</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Valko</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.07733</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,352.99,396.00,8.64;15,117.96,363.72,108.74,8.82" xml:id="b12">
	<analytic>
		<title level="a" type="main">Towards deep learning with segregated dendrites</title>
		<author>
			<persName><forename type="first">Jordan</forename><surname>Guerguiev</surname></persName>
			<idno type="ORCID">0000-0002-6751-8782</idno>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">P</forename><surname>Lillicrap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Blake</forename><forename type="middle">A</forename><surname>Richards</surname></persName>
			<idno type="ORCID">0000-0001-9662-2151</idno>
		</author>
		<idno type="DOI">10.7554/elife.22901</idno>
	</analytic>
	<monogr>
		<title level="j">eLife</title>
		<idno type="ISSNe">2050-084X</idno>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page">e22901</biblScope>
			<date type="published" when="2017-12-05">2017</date>
			<publisher>eLife Sciences Publications, Ltd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,383.59,396.00,8.64;15,117.96,394.32,386.04,8.82;15,117.36,405.23,208.28,8.82" xml:id="b13">
	<analytic>
		<title level="a" type="main">Noise-contrastive estimation: A new estimation principle for unnormalized statistical models</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Gutmann</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Hyv√§rinen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics</title>
				<meeting>the Thirteenth International Conference on Artificial Intelligence and Statistics</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="297" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,425.09,396.00,8.64;15,117.71,435.82,386.29,8.82;15,117.96,446.73,133.59,8.59" xml:id="b14">
	<analytic>
		<title level="a" type="main">Momentum Contrast for Unsupervised Visual Representation Learning</title>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Haoqi</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuxin</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saining</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ross</forename><surname>Girshick</surname></persName>
		</author>
		<idno type="DOI">10.1109/cvpr42600.2020.00975</idno>
	</analytic>
	<monogr>
		<title level="m">2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2020-06">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,466.42,396.00,8.82;15,117.96,477.33,75.27,8.59" xml:id="b15">
	<analytic>
		<title level="a" type="main">How to Represent Part-Whole Hierarchies in a Neural Network</title>
		<author>
			<persName coords=""><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1162/neco_a_01557</idno>
		<idno type="arXiv">arXiv:2102.12627</idno>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<idno type="ISSN">0899-7667</idno>
		<idno type="ISSNe">1530-888X</idno>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="413" to="452" />
			<date type="published" when="2021">2021</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="15,108.00,497.20,396.17,8.64;15,117.96,507.93,316.81,8.82" xml:id="b16">
	<analytic>
		<title level="a" type="main">Unsupervised Discovery of Nonlinear Structure Using Contrastive Backpropagation</title>
		<author>
			<persName><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Simon</forename><surname>Osindero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Max</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yee-Whye</forename><surname>Teh</surname></persName>
		</author>
		<idno type="DOI">10.1207/s15516709cog0000_76</idno>
	</analytic>
	<monogr>
		<title level="j">Cognitive Science</title>
		<idno type="ISSN">0364-0213</idno>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="725" to="731" />
			<date type="published" when="2006-07-08">2006a</date>
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,527.80,397.65,8.64;15,117.96,538.53,386.03,8.82;15,117.54,549.44,388.17,8.82" xml:id="b17">
	<analytic>
		<title level="a" type="main">Learning and relearning in Boltzmann machines</title>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Sejnowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel Distributed Processing: Explorations in the Microstructure of Cognition</title>
				<editor>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Rumelhart</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Mcclelland</surname></persName>
		</editor>
		<meeting><address><addrLine>Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1986">1986</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="282" to="317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,569.13,396.00,8.82;15,117.71,580.03,126.92,8.59" xml:id="b18">
	<analytic>
		<title level="a" type="main">Distilling the knowledge in a neural network</title>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 2014 Deep Learning Workshop</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,599.72,396.00,8.82;15,117.63,610.63,128.69,8.82" xml:id="b19">
	<analytic>
		<title level="a" type="main">Training Products of Experts by Minimizing Contrastive Divergence</title>
		<author>
			<persName coords=""><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1162/089976602760128018</idno>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<title level="j" type="abbrev">Neural Computation</title>
		<idno type="ISSN">0899-7667</idno>
		<idno type="ISSNe">1530-888X</idno>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1771" to="1800" />
			<date type="published" when="2002-08-01">2002</date>
			<publisher>MIT Press - Journals</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,630.50,397.74,8.64;15,117.63,641.23,147.09,8.82" xml:id="b20">
	<analytic>
		<title level="a" type="main">A Fast Learning Algorithm for Deep Belief Nets</title>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Simon</forename><surname>Osindero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yee-Whye</forename><surname>Teh</surname></persName>
		</author>
		<idno type="DOI">10.1162/neco.2006.18.7.1527</idno>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<title level="j" type="abbrev">Neural Computation</title>
		<idno type="ISSN">0899-7667</idno>
		<idno type="ISSNe">1530-888X</idno>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1527" to="1554" />
			<date type="published" when="2006-07">2006b</date>
			<publisher>MIT Press - Journals</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,661.10,396.00,8.64;15,117.96,671.83,386.03,8.82;15,117.63,682.74,99.35,8.82" xml:id="b21">
	<analytic>
		<title level="a" type="main">Weight perturbation: an optimal architecture and learning technique for analog VLSI feedforward and recurrent multilayer networks</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Jabri</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Flower</surname></persName>
		</author>
		<idno type="DOI">10.1109/72.105429</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks</title>
		<title level="j" type="abbrev">IEEE Trans. Neural Netw.</title>
		<idno type="ISSN">1045-9227</idno>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="154" to="157" />
			<date type="published" when="1992">1992</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="15,108.00,702.61,397.66,8.64;15,117.96,713.34,369.71,8.82" xml:id="b22">
	<monogr>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Pantone</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Manickavasagam</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Scellier</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.01981</idno>
		<title level="m">Training end-toend analog neural networks with equilibrium propagation</title>
				<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,75.48,396.00,8.64;16,117.96,86.21,383.78,8.82" xml:id="b23">
	<analytic>
		<title level="a" type="main">Signal Propagation: The Framework for Learning and Inference in a Forward Pass</title>
		<author>
			<persName><forename type="first">Adam</forename><surname>Kohan</surname></persName>
			<idno type="ORCID">0000-0001-6960-1531</idno>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">A</forename><surname>Rietman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hava</forename><forename type="middle">T</forename><surname>Siegelmann</surname></persName>
		</author>
		<idno type="DOI">10.1109/tnnls.2022.3230914</idno>
		<idno type="arXiv">arXiv:1808.03357</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks and Learning Systems</title>
		<title level="j" type="abbrev">IEEE Trans. Neural Netw. Learning Syst.</title>
		<idno type="ISSN">2162-237X</idno>
		<idno type="ISSNe">2162-2388</idno>
		<imprint>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2018">2018</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,105.27,396.17,8.64;16,117.96,116.00,300.55,8.82" xml:id="b24">
	<analytic>
		<title level="a" type="main">Signal Propagation: The Framework for Learning and Inference in a Forward Pass</title>
		<author>
			<persName><forename type="first">Adam</forename><surname>Kohan</surname></persName>
			<idno type="ORCID">0000-0001-6960-1531</idno>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">A</forename><surname>Rietman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hava</forename><forename type="middle">T</forename><surname>Siegelmann</surname></persName>
		</author>
		<idno type="DOI">10.1109/tnnls.2022.3230914</idno>
		<idno type="arXiv">arXiv:2204.01723</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks and Learning Systems</title>
		<title level="j" type="abbrev">IEEE Trans. Neural Netw. Learning Syst.</title>
		<idno type="ISSN">2162-237X</idno>
		<idno type="ISSNe">2162-2388</idno>
		<imprint>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2022">2022</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,135.05,372.05,8.64" xml:id="b25">
	<monogr>
		<title level="m" type="main">Learning multiple layers of features from tiny images</title>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,153.93,396.00,8.64;16,117.96,164.66,306.98,8.82" xml:id="b26">
	<analytic>
		<title level="a" type="main">Random synaptic feedback weights support error backpropagation for deep learning</title>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">P</forename><surname>Lillicrap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Cownden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Douglas</forename><forename type="middle">B</forename><surname>Tweed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Colin</forename><forename type="middle">J</forename><surname>Akerman</surname></persName>
		</author>
		<idno type="DOI">10.1038/ncomms13276</idno>
	</analytic>
	<monogr>
		<title level="j">Nature Communications</title>
		<title level="j" type="abbrev">Nat Commun</title>
		<idno type="ISSNe">2041-1723</idno>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2016-11-08">2016</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,183.72,396.00,8.64;16,117.96,194.45,214.70,8.82" xml:id="b27">
	<analytic>
		<title level="a" type="main">Backpropagation and the brain</title>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">P</forename><surname>Lillicrap</surname></persName>
			<idno type="ORCID">0000-0001-8918-486X</idno>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Santoro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Marris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Colin</forename><forename type="middle">J</forename><surname>Akerman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1038/s41583-020-0277-3</idno>
	</analytic>
	<monogr>
		<title level="j">Nature Reviews Neuroscience</title>
		<title level="j" type="abbrev">Nat Rev Neurosci</title>
		<idno type="ISSN">1471-003X</idno>
		<idno type="ISSNe">1471-0048</idno>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="335" to="346" />
			<date type="published" when="2020-04-17">2020</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,213.51,396.00,8.64;16,117.96,224.24,334.20,8.82" xml:id="b28">
	<analytic>
		<title level="a" type="main">Putting an end to end-to-end: Gradient-isolated learning of representations</title>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>L√∂we</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>O'connor</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Veeling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in neural information processing systems</title>
		<imprint>
			<biblScope unit="page">32</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,243.12,396.00,8.82;16,117.96,254.03,84.67,8.59" xml:id="b29">
	<analytic>
		<title level="a" type="main">Preprint repository arXiv achieves milestone million uploads</title>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Nock</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Guillame-Bert</surname></persName>
		</author>
		<idno type="DOI">10.1063/pt.5.028530</idno>
		<idno type="arXiv">arXiv:2201.11205v2</idno>
	</analytic>
	<monogr>
		<title level="j">Physics Today</title>
		<title level="j" type="abbrev">Phys. Today</title>
		<idno type="ISSNe">1945-0699</idno>
		<imprint>
			<date type="published" when="2022">2022</date>
			<publisher>AIP Publishing</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,273.09,396.00,8.64;16,117.96,283.82,213.76,8.82" xml:id="b30">
	<analytic>
		<title level="a" type="main">Topographic Product Models Applied to Natural Scene Statistics</title>
		<author>
			<persName><forename type="first">Simon</forename><surname>Osindero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Max</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1162/089976606775093936</idno>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<title level="j" type="abbrev">Neural Computation</title>
		<idno type="ISSN">0899-7667</idno>
		<idno type="ISSNe">1530-888X</idno>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="381" to="414" />
			<date type="published" when="2006-02-01">2006</date>
			<publisher>MIT Press - Journals</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,302.87,396.00,8.64;16,117.96,313.60,353.26,8.82" xml:id="b31">
	<analytic>
		<title level="a" type="main">Preprint repository arXiv achieves milestone million uploads</title>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Pereyra</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Chorowski</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">≈Å</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1063/pt.5.028530</idno>
		<idno type="arXiv">arXiv:1701.06548</idno>
	</analytic>
	<monogr>
		<title level="j">Physics Today</title>
		<title level="j" type="abbrev">Phys. Today</title>
		<idno type="ISSNe">1945-0699</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
			<publisher>AIP Publishing</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,332.66,397.65,8.64;16,117.96,343.39,162.33,8.82" xml:id="b32">
	<analytic>
		<title level="a" type="main">Preprint repository arXiv achieves milestone million uploads</title>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Raghu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Raghu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Kornblith</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Duvenaud</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1063/pt.5.028530</idno>
		<idno type="arXiv">arXiv:2011.03037</idno>
	</analytic>
	<monogr>
		<title level="j">Physics Today</title>
		<title level="j" type="abbrev">Phys. Today</title>
		<idno type="ISSNe">1945-0699</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
			<publisher>AIP Publishing</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,362.45,396.00,8.64;16,117.96,373.18,298.57,8.82" xml:id="b33">
	<analytic>
		<title level="a" type="main">Predictive coding in the visual cortex: a functional interpretation of some extra-classical receptive-field effects</title>
		<author>
			<persName><forename type="first">Rajesh</forename><forename type="middle">P N</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dana</forename><forename type="middle">H</forename><surname>Ballard</surname></persName>
		</author>
		<idno type="DOI">10.1038/4580</idno>
	</analytic>
	<monogr>
		<title level="j">Nature Neuroscience</title>
		<title level="j" type="abbrev">Nat Neurosci</title>
		<idno type="ISSN">1097-6256</idno>
		<idno type="ISSNe">1546-1726</idno>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="79" to="87" />
			<date type="published" when="1999-01">1999</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,392.24,397.74,8.64;16,117.96,402.97,134.67,8.59" xml:id="b34">
	<analytic>
		<title level="a" type="main">Preprint repository arXiv achieves milestone million uploads</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Kornblith</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Liao</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1063/pt.5.028530</idno>
		<idno type="arXiv">arXiv:2210.03310</idno>
	</analytic>
	<monogr>
		<title level="j">Physics Today</title>
		<title level="j" type="abbrev">Phys. Today</title>
		<idno type="ISSNe">1945-0699</idno>
		<imprint>
			<date type="published" when="2022">2022</date>
			<publisher>AIP Publishing</publisher>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct coords="16,108.00,422.03,397.74,8.64;16,117.63,432.76,174.54,8.82" xml:id="b35">
	<analytic>
		<title level="a" type="main">Dendritic solutions to the credit assignment problem</title>
		<author>
			<persName><forename type="first">Blake</forename><forename type="middle">A</forename><surname>Richards</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">P</forename><surname>Lillicrap</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.conb.2018.08.003</idno>
	</analytic>
	<monogr>
		<title level="j">Current Opinion in Neurobiology</title>
		<title level="j" type="abbrev">Current Opinion in Neurobiology</title>
		<idno type="ISSN">0959-4388</idno>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="page" from="28" to="36" />
			<date type="published" when="2019-02">2019</date>
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,451.82,396.00,8.64;16,117.96,462.55,182.80,8.82" xml:id="b36">
	<analytic>
		<title level="a" type="main">The perceptron: A probabilistic model for information storage and organization in the brain.</title>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Rosenblatt</surname></persName>
		</author>
		<idno type="DOI">10.1037/h0042519</idno>
	</analytic>
	<monogr>
		<title level="j">Psychological Review</title>
		<title level="j" type="abbrev">Psychological Review</title>
		<idno type="ISSN">0033-295X</idno>
		<idno type="ISSNe">1939-1471</idno>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="386" to="408" />
			<date type="published" when="1958">1958</date>
			<publisher>American Psychological Association (APA)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,481.60,397.65,8.64;16,117.96,492.33,166.70,8.82" xml:id="b37">
	<analytic>
		<title level="a" type="main">Learning representations by back-propagating errors</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">E</forename><surname>Rumelhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ronald</forename><forename type="middle">J</forename><surname>Williams</surname></persName>
		</author>
		<idno type="DOI">10.1038/323533a0</idno>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<title level="j" type="abbrev">Nature</title>
		<idno type="ISSN">0028-0836</idno>
		<idno type="ISSNe">1476-4687</idno>
		<imprint>
			<biblScope unit="volume">323</biblScope>
			<biblScope unit="issue">6088</biblScope>
			<biblScope unit="page" from="533" to="536" />
			<date type="published" when="1986-10">1986</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,511.39,395.99,8.64;16,117.96,522.12,312.19,8.82" xml:id="b38">
	<analytic>
		<title level="a" type="main">Equilibrium Propagation: Bridging the Gap between Energy-Based Models and Backpropagation</title>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Scellier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<idno type="DOI">10.3389/fncom.2017.00024</idno>
	</analytic>
	<monogr>
		<title level="j">Frontiers in Computational Neuroscience</title>
		<title level="j" type="abbrev">Front. Comput. Neurosci.</title>
		<idno type="ISSNe">1662-5188</idno>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page">24</biblScope>
			<date type="published" when="2017-05-04">2017</date>
			<publisher>Frontiers Media SA</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,541.18,396.00,8.64;16,117.96,551.91,387.28,8.82;16,117.22,563.00,71.67,8.64" xml:id="b39">
	<analytic>
		<title level="a" type="main">Dropout: a simple way to prevent neural networks from overfitting</title>
		<author>
			<persName coords=""><forename type="first">N</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The journal of machine learning research</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,581.88,396.00,8.64;16,117.96,592.61,108.46,8.82" xml:id="b40">
	<monogr>
		<title level="m" type="main">Representation learning with contrastive predictive coding</title>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Van Den Oord</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1807.03748</idno>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,611.49,396.00,8.82;16,117.79,622.40,145.38,8.82" xml:id="b41">
	<analytic>
		<title level="a" type="main">Extreme components analysis</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Agakov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="16,108.00,641.45,396.00,8.64;16,117.96,652.18,386.03,8.82;16,117.96,663.09,122.95,8.82" xml:id="b42">
	<analytic>
		<title level="a" type="main">Unsupervised Feature Learning via Non-parametric Instance Discrimination</title>
		<author>
			<persName><forename type="first">Zhirong</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanjun</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stella</forename><forename type="middle">X</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dahua</forename><surname>Lin</surname></persName>
		</author>
		<idno type="DOI">10.1109/cvpr.2018.00393</idno>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE/CVF Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018-06">2018</date>
			<biblScope unit="page" from="3733" to="3742" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
